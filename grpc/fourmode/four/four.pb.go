// Code generated by protoc-gen-go. DO NOT EDIT.
// source: four.proto

package four

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type ReqMsg struct {
	Request              string   `protobuf:"bytes,1,opt,name=Request,proto3" json:"Request,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ReqMsg) Reset()         { *m = ReqMsg{} }
func (m *ReqMsg) String() string { return proto.CompactTextString(m) }
func (*ReqMsg) ProtoMessage()    {}
func (*ReqMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5c751ec4250dde, []int{0}
}

func (m *ReqMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ReqMsg.Unmarshal(m, b)
}
func (m *ReqMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ReqMsg.Marshal(b, m, deterministic)
}
func (m *ReqMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ReqMsg.Merge(m, src)
}
func (m *ReqMsg) XXX_Size() int {
	return xxx_messageInfo_ReqMsg.Size(m)
}
func (m *ReqMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_ReqMsg.DiscardUnknown(m)
}

var xxx_messageInfo_ReqMsg proto.InternalMessageInfo

func (m *ReqMsg) GetRequest() string {
	if m != nil {
		return m.Request
	}
	return ""
}

type RspMsg struct {
	Reply                string   `protobuf:"bytes,1,opt,name=Reply,proto3" json:"Reply,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *RspMsg) Reset()         { *m = RspMsg{} }
func (m *RspMsg) String() string { return proto.CompactTextString(m) }
func (*RspMsg) ProtoMessage()    {}
func (*RspMsg) Descriptor() ([]byte, []int) {
	return fileDescriptor_0d5c751ec4250dde, []int{1}
}

func (m *RspMsg) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_RspMsg.Unmarshal(m, b)
}
func (m *RspMsg) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_RspMsg.Marshal(b, m, deterministic)
}
func (m *RspMsg) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RspMsg.Merge(m, src)
}
func (m *RspMsg) XXX_Size() int {
	return xxx_messageInfo_RspMsg.Size(m)
}
func (m *RspMsg) XXX_DiscardUnknown() {
	xxx_messageInfo_RspMsg.DiscardUnknown(m)
}

var xxx_messageInfo_RspMsg proto.InternalMessageInfo

func (m *RspMsg) GetReply() string {
	if m != nil {
		return m.Reply
	}
	return ""
}

func init() {
	proto.RegisterType((*ReqMsg)(nil), "four.ReqMsg")
	proto.RegisterType((*RspMsg)(nil), "four.RspMsg")
}

func init() { proto.RegisterFile("four.proto", fileDescriptor_0d5c751ec4250dde) }

var fileDescriptor_0d5c751ec4250dde = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x4a, 0xcb, 0x2f, 0x2d,
	0xd2, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x01, 0xb1, 0x95, 0x94, 0xb8, 0xd8, 0x82, 0x52,
	0x0b, 0x7d, 0x8b, 0xd3, 0x85, 0x24, 0xb8, 0xd8, 0x83, 0x52, 0x0b, 0x4b, 0x53, 0x8b, 0x4b, 0x24,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x25, 0x39, 0x2e, 0xb6, 0xa0, 0xe2, 0x02, 0x90,
	0x1a, 0x11, 0x2e, 0xd6, 0xa0, 0xd4, 0x82, 0x9c, 0x4a, 0xa8, 0x0a, 0x08, 0xc7, 0xe8, 0x10, 0x23,
	0x17, 0x8b, 0x5b, 0x7e, 0x69, 0x91, 0x90, 0x06, 0x17, 0x87, 0x5f, 0x7e, 0x70, 0x49, 0x51, 0x6a,
	0x62, 0xae, 0x10, 0x8f, 0x1e, 0xd8, 0x2e, 0x88, 0xe1, 0x52, 0x30, 0x1e, 0xd8, 0x18, 0x25, 0x06,
	0x21, 0x3d, 0x2e, 0x1e, 0xe7, 0x9c, 0xcc, 0xd4, 0xbc, 0x12, 0x62, 0x54, 0x6b, 0x30, 0x82, 0xd4,
	0x07, 0xa7, 0x16, 0x95, 0xa5, 0x16, 0x11, 0xa3, 0xde, 0x80, 0x51, 0xc8, 0x80, 0x8b, 0xc7, 0x25,
	0xbf, 0x34, 0x29, 0x27, 0x95, 0x38, 0xf3, 0x0d, 0x18, 0x93, 0xd8, 0xc0, 0xa1, 0x62, 0x0c, 0x08,
	0x00, 0x00, 0xff, 0xff, 0x2b, 0x18, 0xe5, 0xe2, 0x23, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// FourClient is the client API for Four service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type FourClient interface {
	NoStream(ctx context.Context, in *ReqMsg, opts ...grpc.CallOption) (*RspMsg, error)
	ClientStream(ctx context.Context, opts ...grpc.CallOption) (Four_ClientStreamClient, error)
	ServerStream(ctx context.Context, in *ReqMsg, opts ...grpc.CallOption) (Four_ServerStreamClient, error)
	DoubleStream(ctx context.Context, opts ...grpc.CallOption) (Four_DoubleStreamClient, error)
}

type fourClient struct {
	cc *grpc.ClientConn
}

func NewFourClient(cc *grpc.ClientConn) FourClient {
	return &fourClient{cc}
}

func (c *fourClient) NoStream(ctx context.Context, in *ReqMsg, opts ...grpc.CallOption) (*RspMsg, error) {
	out := new(RspMsg)
	err := c.cc.Invoke(ctx, "/four.Four/NoStream", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fourClient) ClientStream(ctx context.Context, opts ...grpc.CallOption) (Four_ClientStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Four_serviceDesc.Streams[0], "/four.Four/ClientStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fourClientStreamClient{stream}
	return x, nil
}

type Four_ClientStreamClient interface {
	Send(*ReqMsg) error
	CloseAndRecv() (*RspMsg, error)
	grpc.ClientStream
}

type fourClientStreamClient struct {
	grpc.ClientStream
}

func (x *fourClientStreamClient) Send(m *ReqMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fourClientStreamClient) CloseAndRecv() (*RspMsg, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(RspMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fourClient) ServerStream(ctx context.Context, in *ReqMsg, opts ...grpc.CallOption) (Four_ServerStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Four_serviceDesc.Streams[1], "/four.Four/ServerStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fourServerStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Four_ServerStreamClient interface {
	Recv() (*RspMsg, error)
	grpc.ClientStream
}

type fourServerStreamClient struct {
	grpc.ClientStream
}

func (x *fourServerStreamClient) Recv() (*RspMsg, error) {
	m := new(RspMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fourClient) DoubleStream(ctx context.Context, opts ...grpc.CallOption) (Four_DoubleStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Four_serviceDesc.Streams[2], "/four.Four/DoubleStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &fourDoubleStreamClient{stream}
	return x, nil
}

type Four_DoubleStreamClient interface {
	Send(*ReqMsg) error
	Recv() (*RspMsg, error)
	grpc.ClientStream
}

type fourDoubleStreamClient struct {
	grpc.ClientStream
}

func (x *fourDoubleStreamClient) Send(m *ReqMsg) error {
	return x.ClientStream.SendMsg(m)
}

func (x *fourDoubleStreamClient) Recv() (*RspMsg, error) {
	m := new(RspMsg)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// FourServer is the server API for Four service.
type FourServer interface {
	NoStream(context.Context, *ReqMsg) (*RspMsg, error)
	ClientStream(Four_ClientStreamServer) error
	ServerStream(*ReqMsg, Four_ServerStreamServer) error
	DoubleStream(Four_DoubleStreamServer) error
}

// UnimplementedFourServer can be embedded to have forward compatible implementations.
type UnimplementedFourServer struct {
}

func (*UnimplementedFourServer) NoStream(ctx context.Context, req *ReqMsg) (*RspMsg, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NoStream not implemented")
}
func (*UnimplementedFourServer) ClientStream(srv Four_ClientStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ClientStream not implemented")
}
func (*UnimplementedFourServer) ServerStream(req *ReqMsg, srv Four_ServerStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method ServerStream not implemented")
}
func (*UnimplementedFourServer) DoubleStream(srv Four_DoubleStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method DoubleStream not implemented")
}

func RegisterFourServer(s *grpc.Server, srv FourServer) {
	s.RegisterService(&_Four_serviceDesc, srv)
}

func _Four_NoStream_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReqMsg)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FourServer).NoStream(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/four.Four/NoStream",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FourServer).NoStream(ctx, req.(*ReqMsg))
	}
	return interceptor(ctx, in, info, handler)
}

func _Four_ClientStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FourServer).ClientStream(&fourClientStreamServer{stream})
}

type Four_ClientStreamServer interface {
	SendAndClose(*RspMsg) error
	Recv() (*ReqMsg, error)
	grpc.ServerStream
}

type fourClientStreamServer struct {
	grpc.ServerStream
}

func (x *fourClientStreamServer) SendAndClose(m *RspMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fourClientStreamServer) Recv() (*ReqMsg, error) {
	m := new(ReqMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _Four_ServerStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ReqMsg)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FourServer).ServerStream(m, &fourServerStreamServer{stream})
}

type Four_ServerStreamServer interface {
	Send(*RspMsg) error
	grpc.ServerStream
}

type fourServerStreamServer struct {
	grpc.ServerStream
}

func (x *fourServerStreamServer) Send(m *RspMsg) error {
	return x.ServerStream.SendMsg(m)
}

func _Four_DoubleStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(FourServer).DoubleStream(&fourDoubleStreamServer{stream})
}

type Four_DoubleStreamServer interface {
	Send(*RspMsg) error
	Recv() (*ReqMsg, error)
	grpc.ServerStream
}

type fourDoubleStreamServer struct {
	grpc.ServerStream
}

func (x *fourDoubleStreamServer) Send(m *RspMsg) error {
	return x.ServerStream.SendMsg(m)
}

func (x *fourDoubleStreamServer) Recv() (*ReqMsg, error) {
	m := new(ReqMsg)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _Four_serviceDesc = grpc.ServiceDesc{
	ServiceName: "four.Four",
	HandlerType: (*FourServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NoStream",
			Handler:    _Four_NoStream_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ClientStream",
			Handler:       _Four_ClientStream_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServerStream",
			Handler:       _Four_ServerStream_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "DoubleStream",
			Handler:       _Four_DoubleStream_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "four.proto",
}
